import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { Button } from "../components/ui/button";
import { Label } from "../components/ui/Label";
import { Card, CardContent } from "../components/ui/Card";
import { Input } from "../components/ui/Input";
import { userDb } from "../models/mockDB/users";

export default function LoginPage() {
  const navigate = useNavigate();
  const [login, setLogin] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<{ login?: string; password?: string }>({});
  const [showReset, setShowReset] = useState(false);
  const [resetEmail, setResetEmail] = useState("");
  const [resetMessage, setResetMessage] = useState<string | null>(null);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError({});

    const user = userDb
      .getAll()
      .find((u) => u.username === login.trim() || u.email === login.trim());

    if (!user) {
      setError({ login: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
      return;
    }

    if (user.password !== password) {
      setError({ password: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
      return;
    }

    localStorage.setItem("currentUserId", user.id);
    userDb.update(user.id, { lastActive: new Date() });

    navigate(`/profile/${user.id}`);
  };

  // üîπ –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
  const handleReset = (e: React.FormEvent) => {
    e.preventDefault();
    setResetMessage(null);

    const user = userDb.getByEmail(resetEmail.trim());
    if (!user) {
      setResetMessage("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    // —Ç—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ "–ª–∏—Å—Ç–∞" –∞–±–æ —Å–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å
    setResetMessage(
      "‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É."
    );

    setTimeout(() => {
      setShowReset(false);
      setResetEmail("");
      setResetMessage(null);
    }, 2500);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50 text-gray-900">
      <Header />

      <main className="flex-1 flex items-center justify-center px-4 pt-32 md:pt-36 md:pb-24 pb-20 relative">
        <Card className="w-full max-w-md border-gray-300 bg-white shadow-md rounded-2xl">
          <CardContent>
            <h1 className="text-2xl font-semibold mb-6 text-center text-gray-800">
              –£–≤—ñ–π—Ç–∏
            </h1>

            <form onSubmit={handleSubmit} className="space-y-4">
              {/* –õ–æ–≥—ñ–Ω –∞–±–æ Email */}
              <div>
                <Label htmlFor="login">–õ–æ–≥—ñ–Ω –∞–±–æ Email</Label>
                <Input
                  id="login"
                  type="text"
                  value={login}
                  onChange={(e) => setLogin(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –∞–±–æ email"
                  autoComplete="username"
                />
                {error.login && (
                  <p className="mt-1 text-sm text-red-600">{error.login}</p>
                )}
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div>
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                  autoComplete="current-password"
                />
                {error.password ? (
                  <p className="mt-1 text-sm text-red-600">{error.password}</p>
                ) : (
                  <button
                    type="button"
                    onClick={() => setShowReset(true)}
                    className="mt-1 text-sm text-blue-600 hover:underline border-0 bg-transparent focus:outline-none"
                  >
                    –ó–∞–±—É–ª–∏ –ø–∞—Ä–æ–ª—å?
                  </button>
                )}
              </div>

              <Button
                type="submit"
                className="w-full bg-blue-600 text-white hover:bg-blue-700 transition-colors"
              >
                –£–≤—ñ–π—Ç–∏
              </Button>
            </form>

            <p className="mt-6 text-center text-sm text-gray-600">
              –ù–µ –º–∞—î—à –∞–∫–∞—É–Ω—Ç—É?{" "}
              <a href="/register" className="text-blue-600 hover:underline">
                –°—Ç–≤–æ—Ä–∏ –π–æ–≥–æ
              </a>
            </p>
          </CardContent>
        </Card>

        {/* ===== –ú–û–î–ê–õ–¨–ù–ï –í–Ü–ö–ù–û –î–õ–Ø –°–ö–ò–î–ê–ù–ù–Ø –ü–ê–†–û–õ–Ø ===== */}
        {showReset && (
          <div className="absolute inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-2xl shadow-lg w-full max-w-sm">
              <h2 className="text-lg font-semibold mb-4 text-center">
                –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
              </h2>
              <form onSubmit={handleReset} className="space-y-4">
                <div>
                  <Label htmlFor="resetEmail">–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É</Label>
                  <Input
                    id="resetEmail"
                    type="email"
                    value={resetEmail}
                    onChange={(e) => setResetEmail(e.target.value)}
                    placeholder="your@email.com"
                    required
                  />
                </div>

                {resetMessage && (
                  <p
                    className={`text-sm text-center ${
                      resetMessage.startsWith("‚úÖ")
                        ? "text-green-600"
                        : "text-red-600"
                    }`}
                  >
                    {resetMessage}
                  </p>
                )}

                <div className="flex gap-2 justify-center mt-4">
                  <Button
                    type="submit"
                    className="bg-blue-600 text-white hover:bg-blue-700"
                  >
                    –í—ñ–¥–Ω–æ–≤–∏—Ç–∏
                  </Button>
                  <Button
                    type="button"
                    onClick={() => {
                      setShowReset(false);
                      setResetEmail("");
                      setResetMessage(null);
                    }}
                    className="bg-gray-200 text-gray-700 hover:bg-gray-300"
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </Button>
                </div>
              </form>
            </div>
          </div>
        )}
      </main>

      <Footer />
    </div>
  );
}
