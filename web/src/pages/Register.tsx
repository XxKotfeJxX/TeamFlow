import { useState } from "react"
import { useNavigate } from "react-router-dom"
import Header from "../components/Header"
import Footer from "../components/Footer"
import { Button } from "../components/ui/button"
import { Label } from "../components/ui/Label"
import { Card, CardContent } from "../components/ui/Card"
import { Input } from "../components/ui/Input"
import { Checkbox } from "../components/ui/Checkbox"
import { userDb } from "../models/mockDB/users"

function isValidEmail(email: string) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}

export default function RegisterPage() {
  const navigate = useNavigate()

  const [login, setLogin] = useState("")
  const [password, setPassword] = useState("")
  const [repeatPassword, setRepeatPassword] = useState("")
  const [email, setEmail] = useState("")
  const [agree, setAgree] = useState(false)

  const [errors, setErrors] = useState<{
    login?: string
    password?: string
    repeatPassword?: string
    email?: string
    agree?: string
  }>({})

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    const newErrors: typeof errors = {}

    if (!login) newErrors.login = "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω"
    if (password.length < 8) newErrors.password = "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤"
    if (repeatPassword !== password) newErrors.repeatPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è"
    if (!isValidEmail(email)) newErrors.email = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏"
    if (!agree) newErrors.agree = "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ"

    setErrors(newErrors)

    if (Object.keys(newErrors).length === 0) {
      // üîπ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ email –≤–∂–µ —ñ—Å–Ω—É—î
      if (userDb.getByEmail(email)) {
        setErrors({ email: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î" })
        return
      }

      // üîπ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const newUser = userDb.create({
        username: login,
        email,
        password,
        tags: [],
        skills: [],
        links: [],
        languages: [],
        interfaceLang: "uk-UA",
        profileVisibility: "public",
        teams: [],
        plan: "Base",
      })

      // üîπ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ—Ñ—ñ–ª—é, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ ID
      navigate(`/profile/${newUser.id}`)
    }
  }

  return (
    <div className="flex flex-col min-h-screen bg-gray-50 text-gray-900">
      <Header />

      <main className="flex-1 flex items-center justify-center px-4 pt-24 pb-12 md:pt-32 md:pb-16">
        <Card className="w-full max-w-md border-gray-300 bg-white shadow-md">
          <CardContent>
            <h1 className="text-2xl font-semibold mb-6 text-center text-gray-800">
              –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            </h1>

            <form onSubmit={handleSubmit} className="space-y-4">
              {/* –õ–æ–≥—ñ–Ω */}
              <div>
                <Label htmlFor="login">–õ–æ–≥—ñ–Ω</Label>
                <Input
                  id="login"
                  type="text"
                  value={login}
                  onChange={(e) => setLogin(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω"
                />
                {errors.login && <p className="mt-1 text-sm text-red-600">{errors.login}</p>}
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div className="pt-4">
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                />
                {errors.password && (
                  <p className="mt-1 text-sm text-red-600">{errors.password}</p>
                )}
              </div>

              {/* –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä–æ–ª—å */}
              <div>
                <Label htmlFor="repeatPassword">–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</Label>
                <Input
                  id="repeatPassword"
                  type="password"
                  value={repeatPassword}
                  onChange={(e) => setRepeatPassword(e.target.value)}
                  placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                />
                {errors.repeatPassword && (
                  <p className="mt-1 text-sm text-red-600">{errors.repeatPassword}</p>
                )}
              </div>

              {/* Email */}
              <div className="pt-4">
                <Label htmlFor="email">–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å email"
                />
                {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email}</p>}
              </div>

              {/* –ö–∞—Å—Ç–æ–º–Ω–∏–π —á–µ–∫–±–æ–∫—Å */}
              <div className="pt-8">
                <Checkbox
                  checked={agree}
                  onChange={(e) => setAgree(e.target.checked)}
                  label={
                    <>
                      –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑{" "}
                      <a href="/privacy" className="text-blue-600 hover:underline">
                        –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
                      </a>
                    </>
                  }
                />
                {errors.agree && <p className="text-red-600 text-sm mt-1">{errors.agree}</p>}
              </div>

              <Button type="submit" className="w-full bg-blue-600 text-white hover:bg-blue-700">
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
              </Button>
            </form>
          </CardContent>
        </Card>
      </main>

      <Footer />
    </div>
  )
}
