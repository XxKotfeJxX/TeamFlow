import { useState } from "react";
import { useNavigate } from "react-router-dom";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { Button } from "../components/ui/Button";
import { Label } from "../components/ui/Label";
import { Card, CardContent } from "../components/ui/Card";
import { Input } from "../components/ui/Input";
import { Checkbox } from "../components/ui/Checkbox";
import { userDb } from "../models/mockDB/users";

function isValidEmail(email: string): boolean {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}

// üîπ –£–º–æ–≤–∏ –¥–ª—è –ø–∞—Ä–æ–ª—è
const passwordRules = [
  { test: (p: string) => p.length >= 8, text: "–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤" },
  {
    test: (p: string) => /[A-Z]/.test(p),
    text: "–ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–∞ –≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞",
  },
  {
    test: (p: string) => /[a-z]/.test(p),
    text: "–ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞",
  },
  { test: (p: string) => /\d/.test(p), text: "–ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞" },
  {
    test: (p: string) => /[^A-Za-z0-9]/.test(p),
    text: "–ü—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–∏–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª",
  },
];

export default function RegisterPage() {
  const navigate = useNavigate();

  const [login, setLogin] = useState("");
  const [password, setPassword] = useState("");
  const [repeatPassword, setRepeatPassword] = useState("");
  const [email, setEmail] = useState("");
  const [agree, setAgree] = useState(false);

  const [errors, setErrors] = useState<{
    login?: string;
    password?: string[];
    repeatPassword?: string;
    email?: string;
    agree?: string;
  }>({});

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const newErrors: typeof errors = {};

    if (!login.trim()) newErrors.login = "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω";

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∑–∞ –≤—Å—ñ–º–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    const failedRules = passwordRules
      .filter((rule) => !rule.test(password))
      .map((rule) => rule.text);

    if (failedRules.length > 0) {
      newErrors.password = failedRules;
    }

    if (repeatPassword !== password)
      newErrors.repeatPassword = "–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è";

    if (!isValidEmail(email))
      newErrors.email = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏";

    if (!agree)
      newErrors.agree = "–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏—Å—è –∑ –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ";

    setErrors(newErrors);
    if (Object.keys(newErrors).length > 0) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ email
    if (userDb.getByEmail(email)) {
      setErrors({ email: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î" });
      return;
    }

    const newUser = userDb.create({
      username: login,
      email,
      password,
      tags: [],
      skills: [],
      links: [],
      languages: [],
      interfaceLang: "uk",
      profileVisibility: "public",
      teams: [],
      plan: "Base",
    });

    localStorage.setItem("currentUserId", newUser.id);

    navigate(`/profile/${newUser.id}`);
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50 text-gray-900">
      <Header />

      <main className="flex-1 flex items-center justify-center px-4 pt-24 pb-12 md:pt-32 md:pb-16">
        <Card className="w-full max-w-md border-gray-300 bg-white shadow-md rounded-2xl">
          <CardContent>
            <h1 className="text-2xl font-semibold mb-6 text-center text-gray-800">
              –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            </h1>

            <form
              onSubmit={handleSubmit}
              autoComplete="off"
              className="space-y-4"
            >
              {/* –õ–æ–≥—ñ–Ω */}
              <div>
                <Label htmlFor="login">–õ–æ–≥—ñ–Ω</Label>
                <Input
                  id="login"
                  type="text"
                  value={login}
                  onChange={(e) => setLogin(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω"
                />
                {errors.login && (
                  <p className="mt-1 text-sm text-red-600">{errors.login}</p>
                )}
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div className="pt-4">
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                />

                {/* –í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—é */}
                <ul className="mt-2 text-sm space-y-1">
                  {passwordRules.map((rule) => {
                    const passed = rule.test(password);
                    return (
                      <li
                        key={rule.text}
                        className={`flex items-center gap-2 ${
                          passed ? "text-green-600" : "text-gray-500"
                        }`}
                      >
                        <span>{passed ? "‚úÖ" : "‚ö™"}</span>
                        {rule.text}
                      </li>
                    );
                  })}
                </ul>

                {errors.password && (
                  <div className="mt-2 text-sm text-red-600">
                    <p>–ü–∞—Ä–æ–ª—å –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º:</p>
                    <ul className="list-disc ml-5">
                      {errors.password.map((msg, i) => (
                        <li key={i}>{msg}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {/* –ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—é */}
              <div>
                <Label htmlFor="repeatPassword">–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å</Label>
                <Input
                  id="repeatPassword"
                  type="password"
                  value={repeatPassword}
                  onChange={(e) => setRepeatPassword(e.target.value)}
                  placeholder="–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                />
                {errors.repeatPassword && (
                  <p className="mt-1 text-sm text-red-600">
                    {errors.repeatPassword}
                  </p>
                )}
              </div>

              {/* Email */}
              <div className="pt-4">
                <Label htmlFor="email">–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞</Label>
                <Input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å email"
                />
                {errors.email && (
                  <p className="mt-1 text-sm text-red-600">{errors.email}</p>
                )}
              </div>

              {/* –ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ */}
              <div className="pt-6">
                <Checkbox
                  checked={agree}
                  onChange={(e) => setAgree(e.target.checked)}
                  label={
                    <>
                      –Ø –ø–æ–≥–æ–¥–∂—É—é—Å—å –∑{" "}
                      <a
                        href="/privacy"
                        className="text-blue-600 hover:underline"
                      >
                        –ø–æ–ª—ñ—Ç–∏–∫–æ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ
                      </a>
                    </>
                  }
                />
                {errors.agree && (
                  <p className="text-red-600 text-sm mt-1">{errors.agree}</p>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ */}
              <Button
                type="submit"
                className="w-full bg-blue-600 text-white hover:bg-blue-700 transition-colors mt-6"
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
              </Button>
            </form>
          </CardContent>
        </Card>
      </main>

      <Footer />
    </div>
  );
}
