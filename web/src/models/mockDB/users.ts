import { seedUsers } from "./users.seed";

export type PlanType = "Base" | "Lite" | "Pro" | "Enterprise";

export interface User {
  id: string; // —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
  username: string; // üîπ –ª–æ–≥—ñ–Ω
  fullname?: string; // —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ (–æ–ø—Ü—ñ–π–Ω–æ)
  email: string; // üîπ email
  password: string; // üîπ –ø–∞—Ä–æ–ª—å (–ø–æ–∫–∏ –±–µ–∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è)
  avatarUrl?: string; // –∞–≤–∞—Ç–∞—Ä
  tags: string[];
  bio?: string;
  skills: string[];
  links: string[];
  languages: string[];
  timezone?: string;

  createdAt: Date;
  lastActive: Date;
  interfaceLang: string;
  profileVisibility: "public" | "private";

  teams: string[];
  plan: PlanType;
}

// üîπ –ö–ª—é—á –¥–ª—è LocalStorage
const STORAGE_KEY = "mock_users_db_v1";

// =========================================================
// üíæ –§—É–Ω–∫—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
// =========================================================

function saveToStorage(data: User[]): void {
  try {
    const serializable = data.map((u) => ({
      ...u,
      createdAt: u.createdAt.toISOString(),
      lastActive: u.lastActive.toISOString(),
    }));
    localStorage.setItem(STORAGE_KEY, JSON.stringify(serializable));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
  }
}

function loadFromStorage(): User[] {
  try {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (!raw) return [];

    const parsed = JSON.parse(raw) as Partial<User>[];

    return parsed.map((u) => ({
      id: u.id ?? crypto.randomUUID(),
      username: u.username ?? "",
      fullname: u.fullname ?? "",
      email: u.email ?? "",
      password: u.password ?? "",
      avatarUrl: u.avatarUrl ?? "",
      tags: u.tags ?? [],
      bio: u.bio ?? "",
      skills: u.skills ?? [],
      links: u.links ?? [],
      languages: u.languages ?? [],
      timezone: u.timezone ?? "UTC",
      createdAt: u.createdAt ? new Date(u.createdAt) : new Date(),
      lastActive: u.lastActive ? new Date(u.lastActive) : new Date(),
      interfaceLang: u.interfaceLang ?? "uk",
      profileVisibility: u.profileVisibility ?? "public",
      teams: u.teams ?? [],
      plan: u.plan ?? "Base",
    }));
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:", err);
    return [];
  }
}

// =========================================================
// üóÉÔ∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
// =========================================================

let users: User[] = loadFromStorage();

if (users.length === 0) {
  users = [...seedUsers];
  saveToStorage(users);
}

// =========================================================
// ‚öôÔ∏è –°–µ—Ä–≤—ñ—Å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (userDb)
// =========================================================

const genId = () => crypto.randomUUID();

export const userDb = {
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  create: (data: Omit<User, "id" | "createdAt" | "lastActive">): User => {
    const newUser: User = {
      id: genId(),
      ...data,
      avatarUrl: data.avatarUrl || "",
      createdAt: new Date(),
      lastActive: new Date(),
    };
    users.push(newUser);
    saveToStorage(users);
    return newUser;
  },

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
  getById: (id: string): User | undefined => users.find((u) => u.id === id),

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
  getByEmail: (email: string): User | undefined =>
    users.find((u) => u.email === email),

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  getAll: (): User[] => [...users],

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  update: (id: string, updates: Partial<User>): User | undefined => {
    const user = users.find((u) => u.id === id);
    if (!user) return undefined;
    Object.assign(user, updates, { lastActive: new Date() });
    saveToStorage(users);
    return user;
  },

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  delete: (id: string): boolean => {
    const index = users.findIndex((u) => u.id === id);
    if (index === -1) return false;
    users.splice(index, 1);
    saveToStorage(users);
    return true;
  },
};

// ‚úÖ –î–æ–¥–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
export { users };
